{
  "Uuid": "272cf006-9859-4e7e-850f-0dae48a8bbde",
  "IsCustomNode": true,
  "Category": "archilab_Bumblebee.Format",
  "Description": "This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time.",
  "Name": "Format Excel",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "filePath",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "b7ca48cd1e4e47ffbe69e5b8c67a4ffa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a22449f9a5a4a32bbd5c73a82ef1ee8",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "RunIt",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "21110555b88b4a1db79e6faf894a2481",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e8b9ee0c69fa4ebdaba8b568b482ed7e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "BB Style",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "ef8fe2b487ad402e9e3eeba21024d58f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4b035dec47ca4ff48e052d55c8fbe748",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "OUT",
      "Id": "73203ef2364f43eb94da827ce4c629cc",
      "Inputs": [
        {
          "Id": "ad1d0dc0158946c6af9d7ac93b486abe",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Copyright(c) 2016, David Mans, Konrad Sobon\n# @arch_laboratory, http://archi-lab.net, http://neoarchaic.net\n\nimport clr\nimport sys\nimport System\nfrom System import Array\nfrom System.Collections.Generic import *\n\nclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\nfrom Microsoft.Office.Interop import Excel\nSystem.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo(\"en-US\")\nfrom System.Runtime.InteropServices import Marshal\n\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\nsys.path.append(pyt_path)\n\nassemblies = System.AppDomain.CurrentDomain.GetAssemblies()\npath1 = [a.Location for a in assemblies if 'bumblebee,' in a.FullName][0]\npath2 = System.IO.Path.GetDirectoryName(path1).rsplit('\\\\',1)[0]\nbb_path = '%s\\\\extra\\\\' %path2\nsys.path.append(bb_path)\nimport bumblebee as bb\n\n#The inputs to this node will be stored as a list in the IN variable.\ndataEnteringNode = IN\n\nfilePath = IN[0]\nrunMe = IN[1]\nstyles = IN[2]\n\nif filePath.GetType() == System.IO.FileInfo:\n\tfilePath = filePath.FullName\n\ndef StyleData(ws, gs, cellRange):\n\t# get range\n\tif \":\" in cellRange:\n\t\torigin = ws.Cells(bb.xlRange(cellRange)[1], bb.xlRange(cellRange)[0])\n\t\textent = ws.Cells(bb.xlRange(cellRange)[3], bb.xlRange(cellRange)[2])\n\t\trng = ws.Range[origin, extent]\n\telse:\n\t\t# this is a named cell range\n\t\trng = ws.Range(cellRange)\n\t# format cell fill style\n\tif gs.fillStyle != None:\n\t\tfs = gs.fillStyle\n\t\tif fs.patternType != None:\n\t\t\trng.Interior.Pattern = fs.PatternType()\n\t\tif fs.backgroundColor != None:\n\t\t\trng.Interior.Color = fs.BackgroundColor()\n\t\tif fs.patternColor != None:\n\t\t\trng.Interior.PatternColor = fs.PatternColor()\n\t# format cell text style\n\tif gs.textStyle != None:\n\t\tts = gs.textStyle\n\t\tif ts.name != None:\n\t\t\trng.Font.Name = ts.Name()\n\t\tif ts.size != None:\n\t\t\trng.Font.Size = ts.Size()\n\t\tif ts.color != None:\n\t\t\trng.Font.Color = ts.Color()\n\t\tif ts.horizontalAlign != None:\n\t\t\trng.HorizontalAlignment = ts.HorizontalAlign()\n\t\tif ts.verticalAlign != None:\n\t\t\trng.VerticalAlignment = ts.VerticalAlign()\n\t\tif ts.bold != None:\n\t\t\trng.Font.Bold = ts.Bold()\n\t\tif ts.italic != None:\n\t\t\trng.Font.Italic = ts.Italic()\n\t\tif ts.underline != None:\n\t\t\trng.Font.Underline = ts.Underline()\n\t\tif ts.strikethrough != None:\n\t\t\trng.Font.Strikethrough = ts.Strikethrough()\n\t# format cell border style\n\tif gs.borderStyle != None:\n\t\tbs = gs.borderStyle\n\t\tif bs.lineType != None:\n\t\t\trng.Borders.LineStyle = bs.LineType()\n\t\tif bs.weight != None:\n\t\t\trng.Borders.Weight = bs.Weight()\n\t\tif bs.color != None:\n\t\t\trng.Borders.Color = bs.Color()\n\n\treturn ws\n\ndef SetUp(xlApp):\n\t# supress updates and warning pop ups\n\txlApp.Visible = False\n\txlApp.DisplayAlerts = False\n\txlApp.ScreenUpdating = False\n\treturn xlApp\n\ndef ExitExcel(filePath, xlApp, wb, ws):\n\tdef CleanUp(_list):\n\t\tif isinstance(_list, list):\n\t\t\tfor i in _list:\n\t\t\t\tMarshal.ReleaseComObject(i)\n\t\telse:\n\t\t\tMarshal.ReleaseComObject(_list)\n\t\treturn None\n\t\n\twb.SaveAs(unicode(filePath))\n\txlApp.ActiveWorkbook.Close(False)\n\txlApp.ScreenUpdating = True\n\tCleanUp([ws,wb,xlApp])\n\treturn None\n\ndef LiveStream():\n\ttry:\n\t\txlApp = Marshal.GetActiveObject(\"Excel.Application\")\n\t\txlApp.Visible = True\n\t\txlApp.DisplayAlerts = False\n\t\treturn xlApp\n\texcept:\n\t\treturn None\n\ndef Flatten(*args):\n    for x in args:\n        if hasattr(x, '__iter__'):\n            for y in Flatten(*x):\n                yield y\n        else:\n            yield x\n\n# flatten Styles list if its a nested list\nif isinstance(styles, list):\n\tif any(isinstance(x, list) for x in styles):\n\t\tstyles = list(Flatten(styles))\n\nif runMe:\n\ttry:\n\t\terrorReport = None\n\t\tif filePath == None:\n\t\t\t# run excel in a live mode\n\t\t\txlApp = LiveStream()\n\t\t\t# if excel is running and data is being written to single sheet\n\t\t\tif not isinstance(styles, list):\n\t\t\t\twb = xlApp.ActiveWorkbook\n\t\t\t\ttry:\n\t\t\t\t\tif styles.sheetName == None:\n\t\t\t\t\t\tws = xlApp.ActiveSheet\n\t\t\t\t\telse:\n\t\t\t\t\t\tws = xlApp.Sheets(styles.SheetName())\n\t\t\t\texcept:\n\t\t\t\t\tpass\n\t\t\t\tStyleData(ws, styles.GraphicStyle(), styles.CellRange())\n\t\t\t# if excel is running and data is being written to multiple sheets\n\t\t\telse:\n\t\t\t\twb = xlApp.ActiveWorkbook\n\t\t\t\tfor i in styles:\n\t\t\t\t\tws = xlApp.Sheets(i.SheetName())\n\t\t\t\t\tStyleData(ws , i.GraphicStyle(), i.CellRange())\n\t\telse:\n\t\t\ttry:\n\t\t\t\txlApp = SetUp(Excel.ApplicationClass())\n\t\t\t\t# if excel is closed and data is being written to single sheet\n\t\t\t\tif not isinstance(styles, list):\n\t\t\t\t\txlApp.Workbooks.open(unicode(filePath))\n\t\t\t\t\twb = xlApp.ActiveWorkbook\n\t\t\t\t\tws = xlApp.Sheets(styles.SheetName())\n\t\t\t\t\tStyleData(ws, styles.GraphicStyle(), styles.CellRange())\n\t\t\t\t\tExitExcel(filePath, xlApp, wb, ws)\n\t\t\t\t# if excel is closed and data is being written to multiple sheets\n\t\t\t\telse:\n\t\t\t\t\txlApp.Workbooks.open(unicode(filePath))\n\t\t\t\t\twb = xlApp.ActiveWorkbook\n\t\t\t\t\tfor i in styles:\n\t\t\t\t\t\tws = xlApp.Sheets(i.SheetName())\n\t\t\t\t\t\tStyleData(ws , i.GraphicStyle(), i.CellRange())\n\t\t\t\t\tExitExcel(filePath, xlApp, wb, ws)\n\t\t\texcept:\n\t\t\t\txlApp.Quit()\n\t\t\t\tMarshal.ReleaseComObject(xlApp)\n\texcept:\n\t\t\t# if error accurs anywhere in the process catch it\n\t\t\timport traceback\n\t\t\terrorReport = traceback.format_exc()\nelse:\n\terrorReport = \"Run Me is set to False. Please set \\nto True if you wish to write data \\nto Excel.\"\n\nif errorReport == None:\n\tOUT = \"Success!\"\nelse:\n\tOUT = errorReport",
      "VariableInputPorts": true,
      "Id": "3973a2a1d61542f99b6cb5e4b3137078",
      "Inputs": [
        {
          "Id": "89d0aab00f364015a5fdcf4081dacbc1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4073d402e89a47de840ac185c9fb8e17",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e4294ff33aa0425d8e7072157e94d78e",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "26e312ec4f8d4f7a9ecd7d9aeac05166",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "3a22449f9a5a4a32bbd5c73a82ef1ee8",
      "End": "89d0aab00f364015a5fdcf4081dacbc1",
      "Id": "50513621e0224feab2ecc9b2fa0a7739"
    },
    {
      "Start": "e8b9ee0c69fa4ebdaba8b568b482ed7e",
      "End": "4073d402e89a47de840ac185c9fb8e17",
      "Id": "0e9b590fbf584317abe6dd787dd4a12d"
    },
    {
      "Start": "4b035dec47ca4ff48e052d55c8fbe748",
      "End": "e4294ff33aa0425d8e7072157e94d78e",
      "Id": "160fd79c9f96414d827d7e2260b35a91"
    },
    {
      "Start": "26e312ec4f8d4f7a9ecd7d9aeac05166",
      "End": "ad1d0dc0158946c6af9d7ac93b486abe",
      "Id": "a22dec3bef584eb689fe7ea0cc16e8d7"
    }
  ],
  "Dependencies": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.5055",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "b7ca48cd1e4e47ffbe69e5b8c67a4ffa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 329.090264469143,
        "Y": 254.774698358578
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "21110555b88b4a1db79e6faf894a2481",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 332.839027507045,
        "Y": 323.72569329529
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "ef8fe2b487ad402e9e3eeba21024d58f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 407.132363921259,
        "Y": 404.350647746916
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "73203ef2364f43eb94da827ce4c629cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 846.153950678817,
        "Y": 288.620025508107
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "3973a2a1d61542f99b6cb5e4b3137078",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 641.724558567548,
        "Y": 290.084201023846
      }
    ],
    "Annotations": [],
    "X": -330.544291523247,
    "Y": -175.874693759968,
    "Zoom": 1.27771698410772
  }
}